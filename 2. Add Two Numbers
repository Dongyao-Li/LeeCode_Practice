/*
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example:

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807.
*/
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        
        ListNode starter = new ListNode(0);
        ListNode temp3 = starter;
        boolean b = false;
        
        while (l1 != null || l2 != null) {
            if (l1.val + l2.val < 10) {
                if (b) {
                    temp3.next = new ListNode(l1.val + l2.val + 1);
                } else {
                    temp3.next = new ListNode(l1.val + l2.val);
                }
                b = false;
            } else {
                if (b) {
                    temp3.next = new ListNode(l1.val + l2.val - 9);
                } else {
                    temp3.next = new ListNode(l1.val + l2.val - 10);
                }
                b = true;
            }
            l1 = l1.next;
            l2 = l2.next;
            temp3 = temp3.next;
        }
        
        return starter.next;
    }
}
